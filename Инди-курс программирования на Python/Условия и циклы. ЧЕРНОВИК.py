"""
------------------------------------------------------------------------------------------------------------------
# Вводим число. Программа отвечает Чётное или не чётное

a = int(input())
if a % 2 == 0:
    print("Чётное")
else:
    print("Не чётное")
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# На вход программе поступает одно слово.
# 
# Если это строка «Python», программа выводит ДА, в противном случае программа выводит НЕТ
# 
# Sample Input 1:
# 
# C++
# Sample Output 1:
# 
# НЕТ
# Sample Input 2:
# 
# Java
# Sample Output 2:
# 
# НЕТ
# Sample Input 3:
# 
# Python
# Sample Output 3:
# 
# ДА
# Sample Input 4:
# 
# python
# Sample Output 4:
# 
# НЕТ

# 1ый вариант. Длинный
s = input()
if s == "Phyton":
    print("ДА")
else:
    print("НЕТ")

# 2ой вариант. Короткий
print(["НЕТ", "ДА"][input() == "Python"])
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Во всех странах присутствует подоходный налог. В каких-то странах он больше, в каких-то меньше. 
# В РФ граждане платят подоходный налог в размере 13%.
# 
# Представьте теперь, что люди с доходом меньше 20000 рублей освобождены от уплаты налога.
# Напишите программу, которая получает на вход значение дохода и выводит на экран сумму,
# оставшуюся после уплаты налога в 13%. Если у человека зарплата меньше 20000р налог не удерживается.
# 
# Sample Input 1:
# 
# 10000
# Sample Output 1:
# 
# 10000
# Sample Input 2:
# 
# 30000
# Sample Output 2:
# 
# 26100.0
# Sample Input 3:
# 
# 23581
# Sample Output 3:
# 
# 20515.47

income = int(input())
if income > 20000:
    print(income - ((income / 100) * 13))
else:
    print(income)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# Вводятся два целых числа, каждое в отдельной строке.
#
# Ваша задача вывести наибольшее из данных чисел.
#
# Примечание: используйте только условный оператор, функцией max пользоваться нельзя
#
# Sample Input 1:
#
# 8
# 11
# Sample Output 1:
#
# 11
# Sample Input 2:
#
# 50
# 21
# Sample Output 2:
#
# 50

# 1ый вариант
num_1, num_2 = int(input()), int(input())
print((num_1, num_2)[num_1 < num_2])   # Логическое сравнение. Если num_1 меньше num_2, вернёт 1, если больше, вернёт 0. 
# Соответственно вызовется либо первый, либо второй элемент кортежа (num_1, num_2) по полученному индексу в 
# квадратных скобках [0] или [1]

# 2ой вариант
num_1, num_2 = int(input()), int(input())
if num_1 > num_2:
    print(num_1)
else:
    print(num_2)

# 3ий вариант
num_1, num_2 = int(input()), int(input())
print(num_1 if num_1 > num_2 else num_2)
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Программа получает на вход три натуральных числа A, B и C через пробел.
#
# Вам необходимо вывести YES в том случае, если A + B = C и вывести NO в противном случае.
#
# Sample Input 1:
#
# 4 5 9
# Sample Output 1:
#
# YES
# Sample Input 2:
#
# 1 2 4
# Sample Output 2:
#
# NO

# Условие
a, b, c = map(int, input().split())

# 1ый вариант
print("YES" if a + b == c else "NO")

# 2ой вариант
if a + b == c:
    print("YES")
else:
    print("NO")
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Программа получает на вход список из целых чисел, при этом гарантируется, что числа в списке повторяться не будут.
# Ваша задача удалить из этого списка числа 3, 5, 7 и 9. 
# 
# Обратите внимание, что каждое из чисел 3, 5, 7 и 9. необязательно должно присутствовать в введенном списке.
# 
# В качестве ответа необходимо распечатать измененный список
# 
# Sample Input 1:
# 
# 1 2 3 4 5 6 7 8 9 10
# Sample Output 1:
# 
# [1, 2, 4, 6, 8, 10]
# Sample Input 2:
# 
# 4 3 65 32 43 5 2
# Sample Output 2:
# 
# [4, 65, 32, 43, 2]
# Sample Input 3:
# 
# 1 5 2
# Sample Output 3:
# 
# [1, 2]

# 1ый вариант
a = list(map(int, input().split()))
if 3 in a:
    a.remove(3)
if 5 in a:
    a.remove(5)
if 7 in a:
    a.remove(7)
if 9 in a:
    a.remove(9)
print(a)

# 2ой вариант
a = [int(i) for i in input().split()]
b = [3, 5, 7, 9]
for i in a:
    for j in b:
        if i == j:
            a.remove(j)
print(a)

# 3ий вариант
a = list(map(int, input().split()))
[a.remove(i) for i in [3, 5, 7, 9] if i in a]
print(a)

# 4ый вариант
my_list = list(map(int, input().split()))
for digit in [3, 5, 7, 9]:
    if digit in my_list:
        my_list.remove(digit)
print(my_list)
------------------------------------------------------------------------------------------------------------------
"""

# if (num := int(input())) == 100:
#     print("Соточка")
# else:
#     print("Несоточка")
#
# print('Соточка' if (num := int(input())) == 100 else "Несоточка")

"""
------------------------------------------------------------------------------------------------------------------
if (money := int(input())) > 10000:
    print(f"Ого! {money}! Куда вам столько? Мы заберем {money - 10000}")
else:
    print(f"Сумма {money} не превышает лимит, проходите")
------------------------------------------------------------------------------------------------------------------
"""

# print(f"Никаких моржей тут нет" if (walrus := "walrus") not in (text := input()) else f"Нашли моржа")
# print(f"Никаких моржей тут нет" if 'walrus' not in (input()) else f"Нашли моржа")
"""
------------------------------------------------------------------------------------------------------------------
if (s := input()) == (t := input()[::-1]):
    print("YES")
else:
    print("NO")
------------------------------------------------------------------------------------------------------------------
"""

# a, b, c, = int(input()), int(input()), int(input())
# if a + b > c and b + c > a and c + a > b:
#     print("YES")
# else:
#     print("NO")

"""
# Счастливый билет
------------------------------------------------------------------------------------------------------------------
t_num = list(map(int, input().rjust(6, '0')))
if sum(t_num[:3]) == sum(t_num[3:]):
    print("YES")
else:
    print("NO")
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# 1ый вариант
num = int(input())
print((text := 'Even') if num % 2 == 0 else (text := 'Odd'))

# 2ой вариант
print((text := 'Even') if int(input()) % 2 == 0 else (text := 'Odd'))

# 3ий вариант
num = int(input())
text = 'Even' if num % 2 == 0 else 'Odd'
print(text)
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# 1ый вариант
num_1, num_2 = int(input()), int(input())
maximum = num_1 if num_1 > num_2 else num_2
minimum = num_1 if num_1 < num_2 else num_2
print(minimum, maximum)

# 2ой вариант
num_1, maximum = int(input()), int(input())
print(minimum, maximum) if maximum > minimum else (maximum, minimum)

# 3ий вариант не сильно по теме, просто короче
# num = [int(input()), int(input())]
# print(min(num), max(num))

------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Ваша программа принимает на вход предложение и ваша задача определить является ли оно вопросом?
# 
# Если последний символ предложения это знак ?, то в переменную sentence сохраните строку Вопросительное,
# иначе запишите строку Обычное
# 
# В качестве ответа необходимо вывести переменную sentence
# 
# Sample Input 1:
# 
# hasta la vista baby
# Sample Output 1:
# 
# Обычное
# Sample Input 2:
# 
# Как пройти в библиотеку?
# Sample Output 2:
# 
# Вопросительное
# Sample Input 3:
# 
# Символ ? обозначает знак вопроса
# Sample Output 3:
# Обычное

text = input()
print(sentence := 'Вопросительное' if text[-1] == "?" else "Обычное")
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Если расположить рядом два магнита, они начинают взаимодействовать друг с другом.
# При этом одинаковые магнитные полюса (север/север или юг/юг) отталкиваются друг от друга,
# в то время как разные магнитные полюса (север/юг) притягиваются друг к другу.
#
# Ваша программа получает два значения в разных строках - полярности магнитов,
# которые могут иметь значения либо N ( север) либо S (юг)
#
# Ваша задача сохранить в переменную experiment строку Притягиваются, если магниты имеют разную полярность,
# в противном случае сохраните строку Отталкиваются
#
# В качестве ответа необходимо вывести переменную experiment
#
# Sample Input:
#
# N
# N
# Sample Output:
#
# Отталкиваются

# 1ый вариант
s, n = input(), input()
print(experiment := "Притягиваются" if s != n else "Отталкиваются")

# 2ой вариант
print(('Притягиваются', 'Отталкиваются')[input()==input()]) #[в этих скобках будет индекс "0" если
                                                                # полюсы разные или "1" если одинаковые]
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# В данной задаче необходимо сравнить два целых числа A и B. Они поступают на вход программе отдельно в каждой строке.
# 
# Ваша задача вывести символ <, если A меньше B, >, если A больше B и =, если A=B.
# 
# Sample Input 1:
# 
# 5
# 9
# Sample Output 1:
# 
# <
# Sample Input 2:
# 
# 2
# 1
# Sample Output 2:
# 
# >
# Sample Input 3:
# 
# 7
# 7
# Sample Output 3:
# =

# 1ый вариант
a, b = int(input()), int(input())
if a != b:
    if a < b:
        print('<')
    else:
        print('>')
else:
    print('=')

# 2ой вариант
print('<' if (a := int(input())) < (b := int(input())) else '>' if a > b else '=')
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# Даны три целых числа, каждое записано в отдельной строке.
# 
# Нужно вывести значение наибольшего из данных чисел
# 
# Примечание: используйте только условный оператор, функцией max пользоваться нельзя
# 
# Sample Input 1:
# 
# 5
# 7
# 21
# Sample Output 1:
# 
# 21
# Sample Input 2:
# 
# 81
# 75
# -65
# Sample Output 2:
# 
# 81
# Sample Input 3:
# 
# -41
# 7
# -79
# Sample Output 3:
# 
# 7
# Sample Input 4:
# 
# -66
# -21
# -78
# Sample Output 4:
# 
# -21

num_1, num_2, num_3 = int(input()), int(input()), int(input())

if num_1 > num_2:
    if num_1 > num_3:
        print(num_1)
    else:
        print(num_3)
else:
    if num_2 > num_1:
        if num_2 > num_3:
            print(num_2)
        else:
            print(num_3)
            
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# На свой день рождения Петя купил красивый и вкусный торт, который имел идеально круглую форму. Петя не знал,
# сколько гостей придет на его день рождения, поэтому вынужден был разработать алгоритм, 
# согласно которому он сможет быстро разрезать торт на N равных частей. Следует учесть, 
# что разрезы торта можно производить как по радиусу, так и по диаметру.
# 
# Помогите Пете решить эту задачу, определив наименьшее число разрезов торта по заданному числу гостей.
# 
# Входные данные
# 
# Программа получает на вход натуральное число N – число гостей, включая самого виновника торжества
# 
# Выходные данные
# 
# Выведите минимально возможное число разрезов торта.
# 
# Sample Input 1:
# 
# 2
# Sample Output 1:
# 
# 1
# Sample Input 2:
# 
# 3
# Sample Output 2:
# 
# 3

n = int(input())
if n % 2 == 0:
    print(n // 2)
else:
    if n == 1:
        print(0)
    else:
        print(n)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# salary_1, salary_2, salary_3 = map(int, input().split())
#
# if salary_1 > salary_2 and salary_1 > salary_3:
#     if salary_2 > salary_3:
#         print(salary_1 - salary_3)
#     else:
#         print(salary_1 - salary_2)
#
# if salary_2 > salary_1 and salary_2 > salary_3:
#     if salary_1 > salary_3:
#         print(salary_2 - salary_3)
#     else:
#         print(salary_2 - salary_1)
#
# if salary_3 > salary_2 and salary_3 > salary_1:
#     if salary_1 > salary_2:
#         print(salary_3 - salary_2)
#     else:
#         print(salary_3 - salary_1)

# Маленький Петя очень любит подарки. Его мама подарила ему на день рождения две строки равной длины,
# состоящие из больших и маленьких букв латинского алфавита. Теперь Петя хочет сравнить эти строки лексикографически.
# При этом регистр букв значения не имеет, то есть большая буква считается эквивалентной соответствующей маленькой букве.
# Помогите Пете выполнить сравнение.
# 
# Входные данные
# В каждой из первых двух строк записано по одной подаренной строке. Длина строк находится
# в пределах от 1 до 100 включительно. Гарантируется, что строки имеют одинаковую длину,
# а также состоят из больших и маленьких букв латинского алфавита.
# 
# Выходные данные
# Если первая строка меньше второй, выведите «-1». Если вторая строка меньше первой,
# выведите «1». Если строки равны, выведите «0». Учтите, что регистр букв не учитывается при сравнении.
# 
# Оригинал задачи http://codeforces.com/problemset/problem/112/A
# 
# Sample Input 1:
# 
# aaaa
# aaaA
# Sample Output 1:
# 
# 0
# Sample Input 2:
# 
# abs
# Abz
# Sample Output 2:
# 
# -1
# Sample Input 3:
# 
# abcdefg
# AbCdEfF
# Sample Output 3:
# 
# 1

string_1, string_2 = input().upper(), input().upper()
if string_1 != string_2:
    if string_1 > string_2:
        print(1)
    else:
        print(-1)
else:
    print(0)
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Двое решили посоревноваться в набирании текстов на сайте «Кнопочные гонки». Во время соревнования необходимо ввести
# текст из s символов. Первый участник набирает один символ за v1 миллисекунд и имеет пинг t1 миллисекунд.
# Второй участник набирает один символ за v2 миллисекунд и имеет пинг t2 миллисекунд.
# 
# При соединении с пингом (задержкой) в t миллисекунд соревнование проходит для участника следующим образом:
# 
# Ровно через t миллисекунд после начала соревнования участник получает текст, который необходимо ввести.
# Сразу после этого он начинает вводить этот текст.
# Ровно через t миллисекунд после того, как он перепечатал весь текст, сайт получает информацию об этом.
# Победителем в соревновании является тот участник, информация об успехе которого пришла раньше.
# Если информация пришла от обоих участников одновременно, считается, что произошла ничья.
# 
# По данной длине текста и информации об участниках, определите исход игры.
# 
# Входные данные
# 
# Первая строка содержит пять целых чисел s, v1, v2, t1, t2 (1≤s,v1,v2,t1,t2≤1000) — количество символов в тексте,
# скорость набора текста первым участником, скорость набора текста вторым участником,
# пинг первого участника и пинг второго участника.
# 
# Выходные данные
# 
# Если выиграет первый участник, выведите «First». Если выиграет второй участник,
# выведите «Second». В случае ничьей выведите «Friendship».
# Sample Input 1:
# 
# 5 1 2 1 2
# Sample Output 1:
# 
# First
# Sample Input 2:
# 
# 3 3 1 1 1
# Sample Output 2:
# 
# Second
# Sample Input 3:
# 
# 4 5 3 1 5
# Sample Output 3:
# 
# Friendship

s, v1, v2, t1, t2 = map(int, input().split())
player_1 = (s * v1) + t1 * 2
player_2 = (s * v2) + t2 * 2
if player_1 != player_2:
    if player_1 < player_2:
        print("First")
    else:
        print("Second")
else:
    print("Friendship")
------------------------------------------------------------------------------------------------------------------
"""

# city_1, city_2 = input().lower(), input().lower()
#
# if city_1[-1] == city_2[0] or city_1[-1] == "ь" and city_1[-2] == city_2[0]:
#     print("Good")
# else:
#     print("Bad")

"""
------------------------------------------------------------------------------------------------------------------
# Напишите программу, которая считывает с клавиатуры два вещественных числа, а затем строку. 
# Если эта строка является обозначением одной из четырёх основных математических операций (+, -, * или /), 
# то выведите результат применения этой операции к введенным ранее числам, в противном случае выведите «Неизвестно». 
# Также «Неизвестно» следует вывести, если пользователь захочет поделить на ноль.
# 
# Входные данные
# Два вещественных числа в каждой отдельной строчки. На третьей строке вводится символ операции
# 
# Выходные данные
# Необходимо посчитать значение операции «+», «-», «*», «/». Если ввели символ,
# который не относится к данным операциям, необходимо вывести «Неизвестно».
# «Неизвестно» также выводится при попытке деления на ноль
# 
# Sample Input 1:
# 
# 3.5
# 2.5
# +
# Sample Output 1:
# 
# 6.0
# Sample Input 2:
# 
# 5
# 2
# /
# Sample Output 2:
# 
# 2.5
# Sample Input 3:
# 
# 5
# 0
# /
# Sample Output 3:
# 
# Неизвестно
# Sample Input 4:
# 
# 7
# 8
# ?
# Sample Output 4:
# 
# Неизвестно

num_1, num_2 = float(input()), float(input())
math_op = input()

if math_op == "+":
    print(num_1 + num_2)
elif math_op == "-":
    print(num_1 - num_2)
elif math_op == "*":
    print(num_1 * num_2)
elif math_op == "/":
    if num_1 or num_2 == 0.0:
        print("Неизвестно")
    else:
        print(num_1 / num_2)
else:
    print("Неизвестно")
------------------------------------------------------------------------------------------------------------------
"""

# user_pass = input()
# user_pass_conf = input()
# if len(user_pass) < 7:
#     print("Short")
# elif user_pass != user_pass_conf:
#     print("Difference")
# else:
#     print("OK")

"""
------------------------------------------------------------------------------------------------------------------
num = int(input())
match num:
    case 1:
        print("Совсем еще зеленый студентик")
    case 2:
        print("Джун-студент")
    case 3:
        print("Мидл-студент")
    case 4:
        print("Сеньор-студент")
    case 5:
        print("Босс качалки")
    case _:
        print("Совсем еще зеленый студентик")
------------------------------------------------------------------------------------------------------------------
"""
# num_of_month = int(input())
# match num_of_month:
#     case 1 | 3 | 5 | 7 | 8 | 10| 12:
#         print(31)
#     case 4 | 6 | 9 | 11:
#         print(30)
#     case 2:
#         print(28)

"""
------------------------------------------------------------------------------------------------------------------
zodiac_sign = input()
match zodiac_sign:
    case "Овен" | "Лев" | "Стрелец":
        print("Огненный")
    case "Телец" | "Дева" | "Козерог":
        print("Земной")
    case "Близнецы" | "Весы" | "Водолей":
        print("Воздушный")
    case "Рак" | "Скорпион" | "Рыбы":
        print("Водный")
------------------------------------------------------------------------------------------------------------------
"""

# num = 1000
# while num <= 2000:
#     print(num)
#     num += 1


# num = 6785
# while num >= 195:
#     print(num)
#     num -= 5

"""
------------------------------------------------------------------------------------------------------------------
# Мишка Лимак хочет стать самым большим медведем, ну, или хотя бы стать больше своего старшего брата Боба.
# 
# Сейчас вес Лимака равен a, а вес Боба равен b. Гарантируется, что вес Лимака меньше или равен весу Боба.
# 
# Лимак ест много, и его вес утраивается каждый год, а вес Боба удваивается каждый год.
# 
# Через сколько целых лет Лимак станет строго больше (т. е. будет весить строго больше) Боба?
# 
# Входные данные
# В единственной строке находятся два целых числа a и b (1 ≤ a ≤ b ≤ 10) — веса Лимака и 
# Боба соответственно.
# 
# Выходные данные
# Выведите одно целое число — через сколько целых лет Лимак станет строго больше Боба.
# 
# Примечание
# Sample Input 1:
# 
# 4 7
# Sample Output 1:
# 
# 2
# Sample Input 2:
# 
# 4 9
# Sample Output 2:
# 
# 3
# Sample Input 3:
# 
# 1 1
# Sample Output 3:
# 
# 1

limak_weight, bob_weight = map(int, input().split())
years = 0

while limak_weight <= bob_weight:
    limak_weight *= 3
    bob_weight *= 2
    years += 1
print(years)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# Японцы считают цифру «4» очень несчастливой, они даже исключают ее из нумерации этажей
#
# Давайте и мы, от греха подальше, избавимся от этой цифры в списке numbers.
# Ваша задача удалить все упоминания цифры «4» в списке numbers и затем вывести список при помощи команды
#
# print(*numbers)

numbers = [2, 3, 7, 9, 5, 0, 6, 3, 6, 0, 1, 7, 9, 4, 4, 4, 2, 2, 6, 9, 1, 7, 0, 3, 8, 1, 0, 3, 8, 0, 8, 4,
           0, 2, 3, 6, 6, 1, 5, 8, 7, 2, 3, 8, 7, 7, 1, 2, 2, 8, 4, 3, 4, 8, 0, 7, 9, 8, 3, 7, 7, 7, 7, 5,
           1, 7, 4, 5, 0, 8, 0, 9, 2, 4, 7, 6, 6, 5, 9, 7, 1, 7, 8, 8, 3, 4, 9, 7, 6, 4, 2, 0, 0, 0, 9, 4,
           0, 9, 4, 4, 4, 5, 5, 4, 2, 5, 9, 4, 8, 1, 5, 7, 1, 0, 2, 6, 8, 7, 2, 7, 9, 3, 6, 4, 7, 5, 0, 7,
           2, 0, 8, 2, 9, 8, 6, 4, 4, 7, 5, 5, 9, 4, 9, 5, 6, 9, 1, 1, 3, 1, 5, 2, 1, 7, 0, 0, 7, 8, 1, 3,
           0, 0, 4, 4, 3, 3, 6, 7, 8, 6, 1, 2, 0, 2, 0, 9, 9, 0, 5, 2, 4, 1, 7, 4, 9, 9, 4, 9, 6, 9, 2, 7, 
           1, 2, 4, 5, 4, 0, 9, 0]
# здесь должен быть ваш код
while 4 in numbers:
    numbers.remove(4)
# здесь должен быть ваш код
print(*numbers)
------------------------------------------------------------------------------------------------------------------
"""
# str = input()
# while len(str) > 0:
#     print(str)
#     str = str[1:-1]

"""
------------------------------------------------------------------------------------------------------------------
# Выведите все точные квадраты натуральных чисел, не превосходящие входного натурального 
# числа N.
# 
# 
# 
# Входные данные
# На вход поступает натуральное число N
# 
# Выходные данные
# Необходимо вывести  все точные квадраты натуральных чисел, не превосходящие данного числа N.
# 
# Sample Input 1:
# 
# 15
# Sample Output 1:
# 
# 1
# 4
# 9
# Sample Input 2:
# 
# 16
# Sample Output 2:
# 
# 1
# 4
# 9
# 16


num = int(input())
squared = 1
count = 1

while num >= squared :
    print(squared)
    count += 1
    squared = count ** 2
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# В первый день спортсмен пробежал X километров. В каждый последующий день он увеличивал пробег на 15% от 
# предыдущего дня. Вам необходимо определить номер дня, в который пробег спортсмена составил не менее Y километров.
# Само число Y будет поступать на вход программе.
# 
# Входные данные
# Программа получает на вход два натуральных числа X и Y
# 
# Выходные данные
# Выведите целое число – номер дня, в который спортсмен пробежал не менее Y километров.
# 
# Sample Input 1:
# 
# 10 20
# Sample Output 1:
# 
# 6
# Sample Input 2:
# 
# 1 1000
# Sample Output 2:
# 
# 51

x, y = map(int, input().split())
days = 1
while x < y:
    x *= 1.15
    days += 1
print(days)
------------------------------------------------------------------------------------------------------------------
"""

# n, m = map(int, input().split())
# days = 0
# while n > 0:
#     n -= 1
#     days += 1
#     if days % m == 0:
#         n += 1
# print(days)


# a, b = map(int, input().split())
# hours = 0
# while a > 0:
#     a -= 1
#     hours += 1
#     if hours % b == 0:
#         a += 1
# print(hours)

# num = int(input())
# pow_count = 0
#
# while 2 ** pow_count < num:
#     pow_count += 1
# if 2 ** pow_count == num:
#     print(pow_count)
# else:
#     print("НЕТ")





# num_of_month = int(input())
# match num_of_month:
#     case 1 | 3 | 5 | 7 | 8 | 10| 12:
#         print(31)
#     case 4 | 6 | 9 | 11:
#         print(30)
#     case 2:
#         print(28)

"""
------------------------------------------------------------------------------------------------------------------
# 1 Вариант
num = int(input())

while str(num)[0] != '1' and num < 1000000000:
    num *= int(str(num)[0])
print(num)


# 2 Вариант
num = input()
res = int(num)

while num[0] != '1' and res < 1000000000:
    res *= int(num[0])
    num = str(res)
print(res)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# Пользователь вводит целые числа по одному в строке, последовательность оканчивается числом 0. Все, что вводится
# после 0 не относится к последовательности.Напишите программу, которая выводит сумму всех членов данной
# последовательности.
# 
# Sample
# Input
# 1:
# 
# 1
# 2
# 3
# 0
# 5
# 6
# Sample
# Output
# 1:
# 
# 6
# Sample
# Input
# 2:
# 
# -5
# 10
# 0
# 1
# 2
# 3
# Sample
# Output
# 2:
# 
# 5
# Sample
# Input
# 3:
# 
# -1
# -2
# -3
# 0
# Sample
# Output
# 3:
# 
# -6
# Sample
# Input
# 4:
# 
# 4
# 0
# 6
# Sample
# Output
# 4:
# 
# 4

result = 0
while (num := int(input())) != 0:
    result += num
print(result)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# На каждой отдельной строчке пользователь вводит друг за другом пароли в виде строки символов. 
# Валидными паролями будем считать строки, у которых длина варьируется от 5 до 9 символов включительно.
# Как только вы встретите первый невалидный пароль, ваша программа должна закончить считывать пароли и 
# вывести последний введенный валидный пароль.
# 
# Гарантируется, что первый пароль всегда валидный
# 
# Sample Input 1:
# 
# QWERTY
# 12345
# 21.08.90
# Кодзима-гений
# Телепузик
# Sample Output 1:
# 
# 21.08.90
# Sample Input 2:
# 
# FDRE42@u
# *&#@732hH
# hi
# Hello
# OP213jf9@
# HFd23932)
# Sample Output 2:
# 
# *&#@732hH
# Sample Input 3:
# 
# 5453535
# 543534
# 32435
# 4344343
# 4342432
# 424654364
# 4324234
# 53453453
# 424343545
# 5353
# 43
# 32
# 3
# 4
# 5
# 5
# Sample Output 3:
# 
# 424343545

# 1 Вариант
passwords = []
while 4 < len(user_inp := input()) <= 9:
    passwords.append(user_inp)
print(passwords[-1])

# 2 Вариант
while 4 < len((user_inp := input())) <= 9:
    password = user_inp
print(password)
------------------------------------------------------------------------------------------------------------------
"""

# backpack_volume = int(input())
# backpack_vol_count = 0
# items_count = 0
#
# while backpack_vol_count < backpack_volume:
#     item = int(input())
#     backpack_vol_count += item
#     if backpack_vol_count > backpack_volume:
#         print("Довольно!", backpack_vol_count - item, items_count, sep="\n")
#     elif backpack_vol_count == backpack_volume:
#         items_count += 1
#         print("Довольно!", backpack_vol_count, items_count, sep="\n")
#     else:
#         items_count += 1

"""
------------------------------------------------------------------------------------------------------------------
# В последний день уходящего 2016 года Лимак собирается принять участие в соревновании по спортивному программированию.
# Соревнование начнётся в 20:00 и будет продолжаться четыре часа, то есть ровно до полуночи.
# Участникам будет предложено n задач, упорядоченных по возрастанию сложности, то есть задача 1 будет самой лёгкой,
# а задача номер n — самой сложной. Лимак знает, что ему потребуется 5·i минут на решение i-й задачи.
# 
# Друзья Лимака планирую устроить роскошную новогоднюю вечеринку и Лимак хочет прибыть в полночь или ранее.
# Он знает, что ему требуется ровно k минут чтобы добрать до места проведения вечеринки от своего дома,
# где он собирается участвовать в соревновании.
# 
# Сколько максимум задач может успеть решить Лимак, так чтобы не опоздать на новогоднюю вечеринку?
# 
# 
# Примечание
# В первом примере на соревновании участникам предложено 3 задачи и Лимаку требуется 222 минуты,
# чтобы доехать до места проведения вечеринки. Для решения задач требуется 5, 10 и 15 минут соответственно.
# Лимак может решить первые две задачи, потратив на это 5 + 10 = 15 минут,
# после чего выехать в 20:15 и приехать на вечеринку в 23:57 (через 222 минуты). Таким образом он решит две задачи,
# но на решение третьей времени уже не хватит и ответ равен 2.
# 
# Во втором примере Лимак может решить все 4 задачи за 5 + 10 + 15 + 20 = 50 минут.
# В 20:50 он сможет выехать из дома и прибыть на вечеринку ровно в полночь.
# 
# В третьем примере Лимаку нужна только 1 минута, чтобы оказаться на вечеринке,
# так что ему хватит времени для решения всех 7 задач.
# 
# Sample Input 1:
# 
# 3 222
# Sample Output 1:
# 
# 2
# Sample Input 2:
# 
# 4 190
# Sample Output 2:
# 
# 4
# Sample Input 3:
# 
# 7 1
# Sample Output 3:
# 
# 7
# Sample Input 4:
# 
# 1 240
# Sample Output 4:
# 
# 0
# Sample Input 5:
# 
# 10 1
# Sample Output 5:
# 
# 9
# Sample Input 6:
# 
# 9 235
# Sample Output 6:
# 
# 1

n, k = map(int, input().split())
spent_time = 0
pass_examples_count = 0
while pass_examples_count != n:
    pass_examples_count += 1
    spent_time += 5 * pass_examples_count
    if (k + spent_time) > 240:
        pass_examples_count += 0
if (k + spent_time) <= 240 and pass_examples_count <= n:
    print(pass_examples_count)
elif (k + spent_time) > 240:
     print(pass_examples_count - 1)
elif pass_examples_count > n and (k + spent_time) > 240:
    print(n)

------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Ване на день рождения подарили n кубиков. Он с друзьями решил построить из них пирамиду.
# Ваня хочет построить пирамиду следующим образом: на верхушке пирамиды должен находиться 1 кубик,
# на втором уровне — 1 + 2 = 3 кубика, на третьем — 1 + 2 + 3 = 6 кубиков,
# и так далее. Таким образом, на i-м уровне пирамиды должно
# располагаться 1 + 2 + ... + (i - 1) + i кубиков.
# 
# 
# 
# Ваня хочет узнать, пирамиду какой максимальной высоты он может создать с использованием имеющихся кубиков.
# 
# Входные данные
# В первой строке записано целое число n (1 ≤ n ≤ 104) — количество кубиков, подаренных Ване.
# 
# Выходные данные
# Выведите единственной строкой максимально возможную высоту пирамиды.
# 
# Решение youtube patreon boosty
# 
# Sample Input 1:
# 
# 1
# Sample Output 1:
# 
# 1
# Sample Input 2:
# 
# 25
# Sample Output 2:
# 
# 4
# Sample Input 3:
# 
# 4
# Sample Output 3:
# 
# 2
# Sample Input 4:
# 
# 5
# Sample Output 4:
# 
# 2
# Sample Input 5:
# 
# 6560
# Sample Output 5:
# 
# 33
# Sample Input 6:
# 
# 3
# Sample Output 6:
# 
# 1

num_of_cubes = int(input())
cubes_in_line = 0
lines_count = 0
i = 0

while num_of_cubes > 0:
    cubes_in_line += 1 + i
    i += 1
    num_of_cubes -= cubes_in_line
    lines_count += 1
if num_of_cubes == 0:
    print(lines_count)
else:
    print(lines_count - 1)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# В вашем распоряжении имеется два отсортированных списка по неубыванию элементов, состоящих из n и m элементов
# 
# Ваша задача слить их в один отсортированный список размером  n + m
# 
# Входные данные
# Программа получает на вход два числа n и m - количество элементов первого списка и второго списков
# 
# Затем с новой строки поступают элементы первого отсортированного списка, а со следующей строки - второго списка
# 
# Выходные данные
# Слить два списка в один в порядке неубывания и вывести элементы полученного списка
# 
# P.S: пользоваться встроенной сортировкой запрещено
# 
# Примечание: для вывода результирующего списка вы можете использовать следующую конструкцию
# 
# print(*result) # где result - итоговый список
# Разбор задачи
# 
# Sample Input 1:
# 
# 2 3
# 3 9
# 2 3 6
# Sample Output 1:
# 
# 2 3 3 6 9
# Sample Input 2:
# 
# 3 5
# 2 8 8
# 3 4 5 5 10
# Sample Output 2:
# 
# 2 3 4 5 5 8 8 10
# Sample Input 3:
# 
# 2 5
# 3 7
# 1 1 3 6 8
# Sample Output 3:
# 
# 1 1 3 3 6 7 8
# Sample Input 4:
# 
# 6 8
# 1 3 4 5 6 10
# 1 1 1 3 5 7 9 10
# Sample Output 4:
# 
# 1 1 1 1 3 3 4 5 5 6 7 9 10 10
# Sample Input 5:
# 
# 3 8
# 2 9 10
# 1 1 3 4 6 7 9 9
# Sample Output 5:
# 
# 1 1 2 3 4 6 7 9 9 9 10
# Sample Input 6:
# 
# 11 2
# 1 1 1 3 4 5 6 7 8 8 10
# 4 9
# Sample Output 6:
# 
# 1 1 1 3 4 4 5 6 7 8 8 9 10


num_1, num_2 = map(int, input().split())
list_1 = list(map(int, input().split()))
list_2 = list(map(int, input().split()))
list = list_1 + list_2
result = []

while len(list) > 0:
    result.append(min(list))
    list.remove(min(list))
print(*result)
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# По случаю 100500-летия Берляндского государственного университета совсем скоро состоится бал!
# Уже n юношей и m девушек во всю репетируют вальс, менуэт, полонез и кадриль.
# 
# Известно, что на бал будут приглашены несколько пар юноша-девушка, причем уровень умений танцевать партнеров в
# каждой паре должен отличаться не более чем на единицу.
# 
# Для каждого юноши известен уровень его умения танцевать. Аналогично, для каждой девушки известен уровень ее
# умения танцевать. Напишите программу, которая определит наибольшее количество пар,
# которое можно образовать из n юношей и m девушек.
# 
# Входные данные
# В первой строке записано целое число n (1 ≤ n ≤ 100) — количество юношей.
# Вторая строка содержит последовательность a1, a2, ..., an (1 ≤ ai ≤ 100), 
# где ai — умение танцевать i-го юноши.
# 
# Аналогично, третья строка содержит целое m (1 ≤ m ≤ 100) – количество девушек.
# В четвертой строке содержится последовательность b1, b2, ..., bm (1 ≤ bj ≤ 100),
# где bj — умение танцевать j-й девушки.
# 
# Выходные данные
# Выведите единственное число — искомое максимальное возможное количество пар.
# 
# Решение youtube patreon boosty
# 
# Примечание
# В первом примере можно сочетать к примеру так 1-1, 4-5, 6-7 либо 2-1, 4-5, 6-7. 
# В любом случае можно составить только три пары
# ample Input 1:
# 
# 4
# 1 4 6 2
# 5
# 5 1 5 7 9
# Sample Output 1:
# 
# 3
# Sample Input 2:
# 
# 4
# 1 2 3 4
# 4
# 10 11 12 13
# Sample Output 2:
# 
# 0
# Sample Input 3:
# 
# 5
# 1 1 1 1 1
# 3
# 1 2 3
# Sample Output 3:
# 
# 2
# Sample Input 4:
# 
# 4
# 1 6 9 15
# 2
# 5 8
# Sample Output 4:
# 
# 2
# Sample Input 5:
# 
# 4
# 3 3 5 5
# 4
# 4 4 2 2
# Sample Output 5:
# 
# 4

boys = int(input())
boys_skill = list(map(int, input().split()))
boys_skill.sort()
girls = int(input())
girls_skill = list(map(int, input().split()))
girls_skill.sort()
number_of_pairs = 0
i = 0
j = 0

while i < boys and j < girls:
    if abs(boys_skill[i] - girls_skill[j]) <= 1:
        number_of_pairs += 1
        i += 1
        j += 1
    elif boys_skill[i] < girls_skill[j]:
        i += 1
    else:
        j +=1
print(number_of_pairs)
------------------------------------------------------------------------------------------------------------------
"""

# number = int(input())
# while number > 0:
#     print(number % 10)
#     number //= 10

# number = int(input())
# ints_summa = 0
# while number > 0:
#     ints_summa += number % 10
#     number //= 10
# print(ints_summa)

# number = int(input())
# ints_product = 1
# while number > 0:
#     ints_product *= number % 10
#     number //= 10
# print(ints_product)

# number = int(input())
# min_digit = 9
# max_digit = 0
#
# while number > 0:
#     last_digit = number % 10
#     if last_digit > max_digit:
#         max_digit = last_digit
#     elif last_digit < min_digit:
#         min_digit = last_digit
#     number //= 10
#
# print(min_digit)
# print(max_digit)

# number = int(input())
# int_count = 0
#
# while number > 0:
#     last_digit = number % 10
#     if last_digit == 7:
#         int_count += 1
#     number //= 10
#
# print(int_count)
"""
------------------------------------------------------------------------------------------------------------------
number = int(input())
while number > 0:
    last_digit = number % 2
    print(last_digit)
    number //= 2
------------------------------------------------------------------------------------------------------------------
"""
# x = 34
# i = 1
# result = 0
# while i <= x:
#     if x % i == 0:
#         result += i
#         print(i, end=' ')
#
#     i += 1
# print()
# print(result)


# Дано натуральное число N. Определить, является ли оно простым. Натуральное число N называется простым,
# если у него есть только два делителя: единица и само число N.
#
# В качестве ответа выведите "Yes", если число простое,  "No" - в противном случае.
#
# Sample Input:
#
# 5
# Sample Output:
#
# Yes
"""
------------------------------------------------------------------------------------------------------------------
n = int(input())
i = 1
valid =[]

while 0 < i <= 9999999:
    if n % i == 0:
        valid.append(i)
    i += 1
if len(valid) == 2:
    print('Yes')
else:
    print('No')
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# Программа получает на вход натуральное число N. 
# 
# Нужно найти сумму его делителей. 
# 
# Sample Input 1:
# 
# 10
# Sample Output 1:
# 
# 18
# Sample Input 2:
# 
# 31
# Sample Output 2:
# 
# 32

n = int(input())
i = 1
sum_of_ints =0

while i <= n:
    if n % i == 0:
        sum_of_ints += i
    i += 1
print(sum_of_ints)
------------------------------------------------------------------------------------------------------------------
"""

"""
------------------------------------------------------------------------------------------------------------------
# num_1, num_2 = map(int, input().split())
# int_1, int_2 = num_1, num_2
# while int_1 != int_2:
#     if int_1 > int_2:
#         int_1 -= int_2
#     else:
#         int_2 -= int_1
# print(f"Наименьшее общее кратное (НОК) введённых чисел = ", (num_1 * num_2) / int_1)

# list = [34, 56, 78, 126, 43, 78]
#
# while len(list) > 0:
#     last_digit = list.pop()
#     if last_digit % 2 == 0:
#         print("No")
#         break
#     else:
#         ("Yes")

# t = 7
# while t > 1:
#     t -= 1
#     if t == 3:
#         break
#     print(t)


# Программа получает на вход натуральное число n > 1. Выведите минимальный делитель этого числа, отличный от единицы.
# 
# К примеру для числа 12 делителями являются 1, 2, 3, 4, 6, 12. 
# 
# Sample Input 1:
# 
# 12
# Sample Output 1:
# 
# 2
# Sample Input 2:
# 
# 15
# Sample Output 2:
# 
# 3
# Sample Input 3:
# 
# 7
# Sample Output 3:
# 
# 7

# 1 вариант
num = int(input())
list = []
i = num

while i > 0:
    if num % i == 0:
        list.append(i)
        if 1 in list:
            list.pop()
            break
    i -= 1

print(list[-1])

# 2 вариант
numb = int(input())
i = 2
while True:
    if numb % i == 0:
        break
    i += 1
print(i)
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Давайте переберем все числа от а до b включительно и будем их выводить на экран, 
# при этом нужно выполнить следующие условия:
# 
# пропускать (не выводить) числа, которые делятся на 2 или на 3
# если встречаете число, кратное 777, необходимо принудительно закончить цикл, само это число не выводить
# Постарайтесь не использовать цикл for
# 
# Формат ввода
# Вводится два натуральных числа a и b в отдельных строках. Гарантируется, что a<b.
# 
# Формат вывода
# Вывести все числа на интервале от a до b включительно согласно условиям в пунктах 1 и 2

a, b = int(input()), int(input())
while a < b:
    if a == 777:
        break
    if a % 2 == 0 or a % 3 == 0:
        continue

    print(a)
    a += 1
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Гипотеза Коллатца
# Сиракузская последовательность, или последовательность Коллатца, строится так: возьмём натуральное число n; 
# если оно чётное, то заменим его числом n/2; если же оно нечётное, то заменим его числом 3n+1. 
# Получившееся число — следующее в сиракузской последовательности после числа n.
# Затем заменяем получившееся число по тому же правилу, и так далее.
# Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
# 
# Обычно, если проделать такую замену достаточно много раз, мы приходим к числу 1 (за которым следует снова 1). Например: 
# 
# 8 → 4 → 2 → 1 или 10 → 5 → 16 → 8 → 4 → 2 → 1.
# 
# Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
# 
# Если вы обнаружите число, сиракузская последовательность от которого не приходит к 1, то... вы, скорее всего, ошиблись.
# Но если нет, то поздравляем: вы прославитесь, ведь вопрос о том,
# всегда ли сиракузская последовательность приходит к 1 (независимо от начального числа), давно будоражит умы математиков.
# 
# Формат ввода
# Вводится одно натуральное число n.
# 
# Формат вывода
# Выводится одно число — количество шагов, необходимое стартующей от n сиракузской последовательности,
# чтобы впервые дойти до 1.
# 
# Sample Input 1:
# 
# 10
# Sample Output 1:
# 
# 6
# Sample Input 2:
# 
# 16
# Sample Output 2:
# 
# 4


# 1 вариант
number = int(input())
count = 0
while number != 1:
    if number % 2 == 0:
        number /= 2
    else:
        number = (number * 3) + 1
    count += 1

print(count)


# 2 вариант
number = int(input())
count = 0
while True:
    if number != 1:
        if number % 2 == 0:
         number //= 2
        else:
            number = (number * 3) + 1
        count += 1
    else:
        break

print(count)
------------------------------------------------------------------------------------------------------------------
"""
"""
------------------------------------------------------------------------------------------------------------------
# Вам на вход поступает слово и ваша задача в цикле while обойти все его буквы и распечатать их в формате фразы:
# 
# «Текущая буква: <letter>».
# 
# Как только вы встретите строчные английские буквы «e» или «a» нужно вывести фразу «Ага! Нашлась»,
# перестать печатать буквы и принудительно выйти из цикла.
# 
# В случае, если в слове не оказалось букв «e» или «a» необходимо вывести фразу «Распечатали все буквы»
# 
# Sample Input 1:
# 
# phrase
# Sample Output 1:
# 
# Текущая буква: p
# Текущая буква: h
# Текущая буква: r
# Ага! Нашлась
# Sample Input 2:
# 
# Atlanta
# Sample Output 2:
# 
# Текущая буква: A
# Текущая буква: t
# Текущая буква: l
# Ага! Нашлась
# Sample Input 3:
# 
# QWERTY
# Sample Output 3:
# 
# Текущая буква: Q
# Текущая буква: W
# Текущая буква: E
# Текущая буква: R
# Текущая буква: T
# Текущая буква: Y
# Распечатали все буквы
# Sample Input 4:
# 
# aaaae
# Sample Output 4:
# 
# Ага! Нашлась
# Sample Input 5:
# 
# zzztryurtrEAFShjf
# Sample Output 5:
# 
# Текущая буква: z
# Текущая буква: z
# Текущая буква: z
# Текущая буква: t
# Текущая буква: r
# Текущая буква: y
# Текущая буква: u
# Текущая буква: r
# Текущая буква: t
# Текущая буква: r
# Текущая буква: E
# Текущая буква: A
# Текущая буква: F
# Текущая буква: S
# Текущая буква: h
# Текущая буква: j
# Текущая буква: f
# Распечатали все буквы

word = list(input())

while len(word) >= 0:
    if len(word) != 0:
        if word[0] != 'e' and word[0] != 'a':
            print(f"Текущая буква: {word[0]}")
            word.remove(word[0])
        else:
            print("Ага! Нашлась")
            break
    else:
        print("Распечатали все буквы")
        break
------------------------------------------------------------------------------------------------------------------
"""


a = 'fhgf'
b = 'dgrt'
print((a, b).split('/'))