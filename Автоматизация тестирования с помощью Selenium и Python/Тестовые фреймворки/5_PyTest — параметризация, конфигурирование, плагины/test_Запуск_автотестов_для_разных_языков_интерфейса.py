"""÷ель: научитьс€ запускать автотесты дл€ разных локалей, т.е. дл€ разных €зыков интерфейсов.

ћы уже запускали автотесты дл€ разных €зыков в одном из предыдущих шагов, использу€ параметризацию с помощью разных
ссылок, но такой подход сложно масштабировать на большое количество тестов. ƒавайте сделаем так, чтобы сервер сам решал,
какой €зык интерфейса нужно отобразить, основыва€сь на данных браузера. Ѕраузер передает данные о €зыке пользовател€
через запросы к серверу, указыва€ в Headers (заголовке запроса) параметр accept-language. ≈сли сервер получит запрос с
заголовком {accept-language: ru, en}, то он отобразит пользователю русско€зычный интерфейс сайта (передать €зык можно в
командной строке). ≈сли русский €зык не поддерживаетс€, то будет показан следующий €зык из списка, в данном случае
пользователь увидит англо€зычный интерфейс. Ёто, кстати, примерно то же самое, что и выставить предпочтительный €зык в
настройках своего браузера:



„тобы указать €зык браузера с помощью WebDriver, используйте класс Options и метод add_experimental_option, как указано
в примере ниже:"""

# from selenium import webdriver
# from selenium.webdriver.chrome.options import Options

# options = Options()
# options.add_experimental_option('prefs', {'intl.accept_languages': user_language})
# browser = webdriver.Chrome(options=options)

"""ƒл€ Firefox объ€вление нужного €зыка будет выгл€деть немного иначе:"""
# fp = webdriver.FirefoxProfile()
# fp.set_preference("intl.accept_languages", user_language)
# browser = webdriver.Firefox(firefox_profile=fp)


"""¬ конструктор webdriver.Chrome или webdriver.Firefox вы можете добавл€ть разные аргументы, расшир€€ возможности 
тестировани€ ваших веб-приложений: можно указывать прокси-сервер дл€ контрол€ сетевого трафика или запускать разные 
версии браузера, указыва€ локальный путь к файлу браузера. ѕредполагаем, что эти возможности вам понадоб€тс€ позже и 
вы сами сможете найти настройки дл€ этих задач."""